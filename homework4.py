# Задача 22: 
# Даны два неупорядоченных набора целых чисел (может быть, с повторениями). Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах. Пользователь вводит 2 числа. n — кол-во элементов первого множества. m — кол-во элементов второго множества. Затем пользователь вводит сами элементы множеств.

# n = int(input("Введите количество элементов первого множества: "))
# m = int(input("Введите количество элементов второго множества: "))

# # Создаем хэш-таблицу для первого множества
# set1 = {}
# for i in range(n):
#     num = int(input("Введите элемент первого множества: "))
#     set1[num] = set1.get(num, 0) + 1

# # Проходим по второму множеству и ищем пересечение с первым множеством
# result = set()
# for i in range(m):
#     num = int(input("Введите элемент второго множества: "))
#     if num in set1 and set1[num] > 0:
#         result.add(num)
#         set1[num] -= 1

# # Сортируем результат и выводим на экран
# sorted_result = sorted(result)
# print("Пересечение множеств:", sorted_result)

# Задача 24: 
# В фермерском хозяйстве в Карелии выращивают чернику. Она растёт на круглой грядке, причём кусты высажены только по окружности. Таким образом, у каждого куста есть ровно два соседних. Всего на грядке растёт N кустов. Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них выросло различное число ягод — на i-ом кусте выросло ai ягод. В этом фермерском хозяйстве внедрена система автоматического сбора черники. Эта система состоит из управляющего модуля и нескольких собирающих модулей. Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом, собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, которое может собрать за один заход собирающий модуль, находясь перед некоторым кустом заданной во входном файле грядки.

n = int(input("Введите количество кустов: "))
arr = list()

for i in range(n):
    x = int(input())
    arr.append(x)

arr_count = list()

for i in range(len(arr) - 1):
    arr_count.append(arr[i - 1] + arr[i] + arr[i + 1])
arr_count.append(arr[-2] + arr[-1] + arr[0])

print(max(arr_count))